/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
 * @param {string} botToken - –¢–æ–∫–µ–Ω –±–æ—Ç–∞
 * @param {string} chatId - ID —á–∞—Ç–∞
 * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @returns {Promise<boolean>} - true –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
 */
export const sendTelegramMessage = async (botToken, chatId, message) => {
  try {
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'HTML'
      })
    });

    const result = await response.json();
    
    if (result.ok) {
      console.log('Telegram message sent successfully:', result);
      return true;
    } else {
      console.error('Telegram API error:', result);
      return false;
    }
  } catch (error) {
    console.error('Error sending Telegram message:', error);
    return false;
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram –±–æ—Ç–æ–º
 * @param {string} botToken - –¢–æ–∫–µ–Ω –±–æ—Ç–∞
 * @returns {Promise<boolean>} - true –µ—Å–ª–∏ –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
 */
export const testTelegramConnection = async (botToken) => {
  try {
    const response = await fetch(`https://api.telegram.org/bot${botToken}/getMe`);
    const result = await response.json();
    
    if (result.ok) {
      console.log('Telegram bot info:', result.result);
      return true;
    } else {
      console.error('Telegram bot error:', result);
      return false;
    }
  } catch (error) {
    console.error('Error testing Telegram connection:', error);
    return false;
  }
};

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 * @param {string} botToken - –¢–æ–∫–µ–Ω –±–æ—Ç–∞
 * @param {string} chatId - ID —á–∞—Ç–∞
 * @returns {Promise<boolean>} - true –µ—Å–ª–∏ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
 */
export const sendTestMessage = async (botToken, chatId) => {
  const testMessage = `ü§ñ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–Ω–æ–≥–æ –æ—Ñ–∏—Å–∞.\n\n–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!`;
  
  return await sendTelegramMessage(botToken, chatId, testMessage);
};

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–¥–∞—á–∞—Ö —Å –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏–º—Å—è –¥–µ–¥–ª–∞–π–Ω–æ–º
 * @param {Array} notifications - –ú–∞—Å—Å–∏–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –∑–∞–¥–∞—á–∞–º–∏ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
 * @param {string} siteUrl - URL —Å–∞–π—Ç–∞
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
export const sendDeadlineNotifications = async (notifications, siteUrl = '') => {
  const results = {
    sent: 0,
    failed: 0,
    errors: []
  };

  for (const notification of notifications) {
    try {
      const { task, employee, notificationType, deadline } = notification;
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const message = createNotificationText(task, notificationType, deadline, siteUrl);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
      const success = await sendTelegramMessage(
        '8257710577:AAHJUmwbwB0mTj5KNn--pfT-04tXOunPVDY', // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        employee.chatId, 
        message
      );
      
      if (success) {
        results.sent++;
      } else {
        results.failed++;
        results.errors.push(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É: ${employee.name}`);
      }

    } catch (error) {
      results.failed++;
      results.errors.push(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${error.message}`);
    }
  }

  return {
    success: results.failed === 0,
    ...results
  };
};

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–µ
 * @param {Object} task - –ó–∞–¥–∞—á–∞
 * @param {string} notificationType - –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 * @param {Date} deadline - –î–∞—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–∞
 * @param {string} siteUrl - URL —Å–∞–π—Ç–∞
 * @returns {string} - –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
const createNotificationText = (task, notificationType, deadline, siteUrl) => {
  const deadlineStr = deadline.toLocaleDateString('ru-RU');
  const taskLink = siteUrl ? `${siteUrl}/project-office` : '';
  
  let urgency = '';
  let emoji = '';
  
  switch (notificationType) {
    case 'weekBefore':
      urgency = '—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é';
      emoji = 'üìÖ';
      break;
    case 'dayBefore':
      urgency = '–∑–∞–≤—Ç—Ä–∞';
      emoji = '‚ö†Ô∏è';
      break;
    case 'dayOf':
      urgency = '—Å–µ–≥–æ–¥–Ω—è';
      emoji = 'üö®';
      break;
    default:
      urgency = '—Å–∫–æ—Ä–æ';
      emoji = 'üìã';
  }

  return `${emoji} <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ</b>\n\n` +
         `<b>–ó–∞–¥–∞—á–∞:</b> ${task.work_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
         `<b>–î–µ–¥–ª–∞–π–Ω:</b> ${deadlineStr} (${urgency})\n` +
         `<b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</b> ${task.responsible || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
         `<b>–≠—Ç–∞–ø:</b> ${task.construction_stage || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n` +
         (taskLink ? `üîó <a href="${taskLink}">–û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–Ω–æ–º –æ—Ñ–∏—Å–µ</a>` : '');
};
