"""
Скрипт для быстрого импорта списка этапов строительства
Не удаляет существующие записи, только добавляет новые
"""

from app.database import SessionLocal
from app import models

# Список этапов для импорта
stages_to_import = [
    "Подготовительные работы",
    "Разработка котлована",
    "Устройство бетонной подготовки и монолитных фундаментных плит",
    "Монтаж сборных ж/б конструкций",
    "Обеспечение пожарной безопасности",
    "Фундамент",
    "Разборка временных дорог из ж/б плит",
    "Перебазировка и монтаж башенных кранов",
    "Каменная кладка",
    "Устройство кровли",
    "Наружная отделка фасада",
    "Утепление вентшахт, козырьки, переходные лестницы",
    "Электромонтажные работы",
    "Вертикальная оклеечная гидроизоляция стен подвала и монолитной плиты",
    "Обратная засыпка",
    "Монтаж металлических ограждений по фасаду",
    "Камера наружного водопровода",
    "Надстройка на кровле",
    "Монтаж оконных ограждений (внешние конструкции)",
    "Монтаж оконных конструкций",
    "Штукатурные работы",
    "Монтаж ОВ и ВК",
    "Наружный водопровод",
    "Монтаж ИТП",
    "Монтаж насосной, ИТП, электрощитовой",
    "Наружный высоковольтный кабель",
    "Наружный газопровод",
    "Монтаж подпорных стен",
    "Внутриплощадочная и наружная сеть",
    "Внутриплощадочная и наружная сеть ливневой канализации",
    "Теплотрасса от котельной к ж/д",
    "Внутриплощадочные инженерные сети",
    "Внутриплощадочные электрические сети",
    "Устройство стяжки пола",
    "Монтаж лестничных ограждений",
    "Отделочные работы",
    "Монтаж дверей",
    "Сети внутриплощадочного освещения",
    "Монтаж лифтового оборудования",
    "Ввод теплотрассы",
    "Выбор МАФ",
    "Монтаж отдельно стоящей котельной",
    "Монтаж МАФ",
    "Отсыпка песка под благоустройство",
    "Благоустройство",
    "Озеленение",
    "Ограждение территории",
    "Домофон, интернет, слаботочные системы, пожаротушение",
    "Отделка цоколя",
    "Пожарная сигнализация",
    "Сети наружного освещения",
    "Навигация",
    "Пуск тепла",
    "Монтаж ТП на объект",
    "Демонтаж и перебазировка башенных кранов",
    "Разборка временных дорог из ж/б плит",
    "Демонтаж забора",
    "Получение ЗОС и РНВ",
    "Монтаж оборудования ПНС",
    "Монтаж оборудования электрощитовой (ВРУ)",
    "Внутриплощадочные сети ливневой канализации",
    "Внутриплощадочные сети хоз. бытовой канализации"
]

def import_stages():
    db = SessionLocal()
    
    try:
        # Удаляем дубликаты, сохраняя порядок
        unique_stages = []
        seen = set()
        duplicates = []
        
        for stage in stages_to_import:
            if stage not in seen:
                seen.add(stage)
                unique_stages.append(stage)
            else:
                duplicates.append(stage)
        
        if duplicates:
            print(f"⚠️  Найдены дубликаты в списке импорта (будут пропущены):")
            for dup in set(duplicates):
                print(f"   - {dup}")
            print()
        
        print(f"Начинаем импорт {len(unique_stages)} уникальных этапов строительства...\n")
        
        # Получаем максимальный order_index из существующих записей
        max_order = db.query(models.ConstructionStage).count()
        
        created_count = 0
        skipped_count = 0
        
        for index, stage_name in enumerate(unique_stages):
            # Проверяем существование этапа
            existing = db.query(models.ConstructionStage).filter(
                models.ConstructionStage.name == stage_name
            ).first()
            
            if not existing:
                # Создаем новый этап
                stage = models.ConstructionStage(
                    name=stage_name,
                    description=f"Импортирован из списка",
                    order_index=max_order + created_count,
                    is_active=True
                )
                db.add(stage)
                created_count += 1
                print(f"✓ Создан этап: {stage_name}")
            else:
                skipped_count += 1
                print(f"- Пропущен (уже существует): {stage_name}")
        
        # Коммитим только если все прошло успешно
        db.commit()
        
        print(f"\n✅ Импорт завершен!")
        print(f"   Создано новых этапов: {created_count}")
        print(f"   Пропущено существующих: {skipped_count}")
        if duplicates:
            print(f"   Дубликатов в списке: {len(duplicates)}")
        
        # Показываем общую статистику
        total_stages = db.query(models.ConstructionStage).count()
        print(f"   Всего этапов в системе: {total_stages}")
        
    except Exception as e:
        print(f"\n❌ Ошибка при импорте: {e}")
        db.rollback()
    finally:
        db.close()

if __name__ == "__main__":
    import_stages()